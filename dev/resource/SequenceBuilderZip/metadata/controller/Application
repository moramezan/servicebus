{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Application",
        "popup": [
            "null"
        ]
    },
    "configAlternates": {
        "popup": "object"
    },
    "designerId": "30321ebb-d159-427a-9ebf-87c303155eb7",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "popup",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#newStep",
                "designer|targetType": "Ext.button.Button",
                "fn": "onButtonBeforeRender",
                "implHandler": [
                    "var button = component;",
                    "var tag2processes = {};",
                    "",
                    "Ext.getStore('Processes').each(function(process) {",
                    "    var processes = [];",
                    "    tag2processes[process.get('Tag')] = processes;",
                    "});",
                    "",
                    "Ext.getStore('Processes').each(function(process) {",
                    "    var processes = tag2processes[process.get('Tag')];",
                    "    processes.push(process);",
                    "});",
                    "",
                    "var menu = button.menu;",
                    "",
                    "//iterate over each tag name",
                    "Ext.each(Ext.Object.getKeys(tag2processes), function(tag) {",
                    "    var tagItem = {",
                    "        text: tag,",
                    "        menu: {",
                    "            items: []",
                    "        }",
                    "    };",
                    "",
                    "    //iterate over each process",
                    "    Ext.each(tag2processes[tag], function(process) {",
                    "",
                    "        //TERMINATE step cannot be created",
                    "        if(process.get('Name') == 'Terminate') return;",
                    "",
                    "        var processItem = {",
                    "            itemId: process.get('Id'),",
                    "            text: process.get('Name'),",
                    "            iconCls: process.get('Icon')",
                    "        };",
                    "",
                    "        //add process item to tag",
                    "        tagItem.menu.items.push(processItem);",
                    "    });",
                    "",
                    "    //add tag item to menu",
                    "    menu.add(tagItem);",
                    "});",
                    ""
                ],
                "name": "beforerender",
                "scope": "me"
            },
            "designerId": "5b6aba6d-4459-4e22-be84-b467900d804b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "menuitem",
                "designer|targetType": "Ext.menu.Item",
                "fn": "onMenuitemClick",
                "implHandler": [
                    "var me = this,",
                    "    grid = me.getGrid(),",
                    "    view = grid.getView(),",
                    "    store = grid.getStore(),",
                    "    processId = item.getItemId(),",
                    "    sequenceId = Sequence__c.Id;",
                    "",
                    "view.mask('Saving...');",
                    "Visualforce.remoting.Manager.invokeAction(",
                    "    $RemoteAction.SequenceBuilderExtension.appendStep,",
                    "    sequenceId,",
                    "    processId,",
                    "    function(step) {",
                    "        view.mask('Saving...');",
                    "        store.load(function() {",
                    "            view.unmask();",
                    "        });",
                    "    }",
                    ");"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "2a71ff26-5830-4f54-ba2d-2182b57bbec1"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "grid",
                "selector": "gridpanel#steps",
                "xtype": "Ext.grid.Panel"
            },
            "designerId": "41d85ef8-2f64-434f-9d0f-582d9481dacd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#steps > gridview",
                "designer|params": [
                    "node",
                    "data",
                    "overModel",
                    "dropPosition",
                    "eOpts"
                ],
                "designer|targetType": "Ext.grid.View",
                "fn": "onDrop",
                "implHandler": [
                    "var controller = this,",
                    "    grid = data.view.ownerCt,",
                    "    fromStep = data.records[0],",
                    "    toStep = overModel,",
                    "    store = grid.getStore();",
                    "",
                    "var beforeOrAfter;",
                    "if ('before' == dropPosition) {",
                    "    beforeOrAfter = $RemoteAction.SequenceBuilderExtension.moveStepBefore;",
                    "} else if ('after' == dropPosition) {",
                    "    beforeOrAfter = $RemoteAction.SequenceBuilderExtension.moveStepAfter;",
                    "}",
                    "",
                    "grid.mask('Moving...');",
                    "Visualforce.remoting.Manager.invokeAction(",
                    "    beforeOrAfter,",
                    "    fromStep.get('Id'),",
                    "    toStep.get('Id'),",
                    "    function(data) {",
                    "        grid.mask('Moving...');",
                    "        store.load(function() {",
                    "            grid.unmask();",
                    "        });",
                    "    }",
                    ");"
                ],
                "name": "drop",
                "scope": "me"
            },
            "designerId": "f513ebc3-a6ba-46be-8bdc-ff93c33f3fc3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#steps > gridview",
                "designer|targetType": "Ext.grid.View",
                "fn": "onViewReady",
                "implHandler": [
                    "/**",
                    " * The application is snappier when all Sequence Steps are already loaded when the page",
                    " * displays, instead of fetching them for the first time with a RemoteAction call.",
                    " *",
                    " * But since the RemoteAction invokes sequence.terminate(), the Terminate Step will only",
                    " * exist after the RemoteAction call fires! A freshly created Sequence lacks a Terminate!",
                    " *",
                    " * So for freshly created sequences, we explicitly re-load the store here, which gives",
                    " * us back the Terminate step per RemoteAction.SequenceBuilderExtension.fetchSteps",
                    " */",
                    "var store = dataview.getStore();",
                    "if (!store.getCount()) store.load();",
                    "",
                    "/**",
                    " * COUPLES TO Builder.controller.Application#onConfigureLinkClick()",
                    " * This closes the config popup if the clicks outside it.",
                    " */",
                    "var controller = this;",
                    "Ext.fly(window).on('focus', function() {",
                    "    controller.getApplication().fireEvent('mainwindowfocus', controller);",
                    "});"
                ],
                "name": "viewready",
                "scope": "me"
            },
            "designerId": "e43a14f2-5f05-4614-99a7-8a2b36a5205e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#steps",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onLinkClick",
                "implHandler": [
                    "if ('configurelink' == e.target.className) {",
                    "    this.onConfigureLinkClick.apply(this, arguments);",
                    "} else if ('deletelink' == e.target.className) {",
                    "    this.onDeleteLinkClick.apply(this, arguments);",
                    "}",
                    ""
                ],
                "name": "cellclick",
                "scope": "me"
            },
            "designerId": "bf2114ae-966a-48d8-bb78-7cad2fbf3320"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tableview",
                    "td",
                    "cellIndex",
                    "record",
                    "tr",
                    "rowIndex",
                    "e",
                    "eOpts"
                ],
                "fn": "onConfigureLinkClick",
                "implHandler": [
                    "var me = this, //controller",
                    "    y = window.screenTop || window.screenY,",
                    "    x = window.screenLeft || window.screenX,",
                    "    top = Math.round(Ext.Element.getViewportHeight() * 0.15) + y,",
                    "    left = Math.round(Ext.Element.getViewportWidth() * 0.1) + x,",
                    "    width = Math.round(Ext.Element.getViewportWidth() * 0.8),",
                    "    height = Math.round(Ext.Element.getViewportHeight() * 0.8)",
                    ";",
                    "",
                    "/**",
                    " * COUPLES TO Builder.controller.Application#onViewReady()",
                    " * This opens the config popup without any Clickjack issues.",
                    " */",
                    "Ext.getBody().mask();",
                    "me.popup = window.open(",
                    "    e.target.href,",
                    "    'eda_config',",
                    "    'width=' + width + ',height=' + height + ',left=' + left + ',top=' + top + ',toolbar=no,status=no,directories=no,menubar=no,resizable=yes'",
                    ");",
                    "me.popup.focus();"
                ]
            },
            "designerId": "540df7c3-43c4-4c27-b109-a729235a017c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tableview",
                    "td",
                    "cellIndex",
                    "record",
                    "tr",
                    "rowIndex",
                    "e",
                    "eOpts"
                ],
                "fn": "onDeleteLinkClick",
                "implHandler": [
                    "var grid = tableview;",
                    "var store = grid.getStore();",
                    "",
                    "Ext.Msg.confirm('Delete Step', 'Are you sure?', function(btn) {",
                    "    if (btn === 'yes') {",
                    "        store.remove(record);",
                    "        grid.mask('Deleting...');",
                    "        store.sync({",
                    "            callback: function() {",
                    "                grid.mask('Deleting...');",
                    "                store.load(function() {",
                    "                    grid.unmask();",
                    "                });",
                    "            }",
                    "        });",
                    "    }",
                    "}).setIcon(Ext.Msg.WARNING);"
                ]
            },
            "designerId": "bee0e44c-933a-44bb-894f-338f40b879d3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "gridpanel",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onDrag",
                "implHandler": [
                    "var view = tableview,",
                    "    plugin = view.getPlugin('dragdrop');",
                    "",
                    "plugin.dragZone.dragText = 'Move ' + record.get('ProcessName') + ' step here';"
                ],
                "name": "beforecellmousedown",
                "scope": "me"
            },
            "designerId": "bceecc07-2306-4a69-bf9b-b14ab590b636"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "gridpanel",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onCellDoubleClick",
                "implHandler": [
                    "/**",
                    " * Double click behaves like hitting Edit",
                    " */",
                    "if (record.get('ConfigurationId')) {",
                    "    e.target = Ext.get(tr).down('a.configurelink').dom;",
                    "    this.onConfigureLinkClick.apply(this, arguments);",
                    "}"
                ],
                "name": "celldblclick",
                "scope": "me"
            },
            "designerId": "28b2df76-7cf7-434f-a61e-c109d0ed7335"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "menuitem",
                "designer|targetType": "Ext.menu.Item",
                "fn": "onMenuitemAfterRender",
                "implHandler": [
                    "/**",
                    " * Displays a tooltip for each menu item under the 'New Step' button",
                    " */",
                    "var menuitem = component,",
                    "    process = Ext.getStore('Processes').getById(menuitem.getItemId());",
                    "",
                    "//nothing to do if not a process",
                    "if (!process) return;",
                    "",
                    "new Ext.ToolTip({",
                    "    target: menuitem.el.dom,",
                    "    html: process.get('Description'),",
                    "    dismissDelay: 0,",
                    "    shadow: true",
                    "});"
                ],
                "name": "afterrender",
                "scope": "me"
            },
            "designerId": "e11cc1d0-5197-4ece-b8bb-b4351e534f4f"
        },
        {
            "type": "applicationaction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "onMainWindowFocus",
                "implHandler": [
                    "var store = Ext.getStore('Steps'),",
                    "    grid = this.getGrid();",
                    "",
                    "Ext.getBody().unmask();",
                    "",
                    "/**",
                    " * When user closes the configuration window, we reload the grid. Any",
                    " * ConfigurationName changes will then be reflected for the user to see.",
                    " * The main window is always refocussed by closing the configuration window.",
                    " */",
                    "if (!controller.popup.closed) {",
                    "    controller.popup.close();",
                    "",
                    "    grid.mask('Loading...');",
                    "    store.load(function() {",
                    "        grid.unmask();",
                    "    });",
                    "}"
                ],
                "name": "mainwindowfocus",
                "scope": "this"
            },
            "designerId": "e8985047-d5ae-4d80-abf8-ff1f41fbb7af"
        }
    ]
}