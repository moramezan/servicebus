{
    "type": "Ext.app.Application",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "controllers": [
            "Application"
        ],
        "models": [
            "AsyncApexJob",
            "Process"
        ],
        "name": "Discover",
        "requires": [
            "Discover.override.data.proxy.Direct"
        ],
        "stores": [
            "AsyncApexJobs",
            "Processes"
        ],
        "views": [
            "Holder"
        ]
    },
    "name": "Application",
    "designerId": "application",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "/**",
                    " * There's some pretty crazy polling going on in this application. We do it to",
                    " * provide user feedback about the status of an Batch Apex job. Batch Apex can sit",
                    " * around in a bullshit nondeterminate state (Queued) for long periods of time,",
                    " * so we poll and wait until we see it handle at least ONE record, before blasting",
                    " * the platform with requests to show us WHAT it's doing (generating processes).",
                    " *",
                    " * The host page is rendered with the StandardController for AsyncApexJob, so at",
                    " * the time the application is loaded, we know the initial Job Id etc.",
                    " *",
                    " * 1. The grid is rendered, and we immediately begin polling the AsyncApexJob.",
                    " *",
                    " * 2. When (asyncApexJob.JobItemsProcessed > 0) the batch has [started] for real.",
                    " *",
                    " * 3. On [started] event, we immediately ALSO begin polling the Processes.",
                    " *",
                    " * 4. When (asyncApexJob.Status is Aborted|Completed|Failed) it is [finished].",
                    " *",
                    " * 5. On [finished] event, we stop polling both the AsyncApexJob and Processes.",
                    " */",
                    "",
                    "Ext.create('Discover.view.Holder', {renderTo: 'bodyCell'});",
                    ""
                ]
            },
            "name": "launch",
            "designerId": "5a18cb7a-3cc2-4d64-8129-b39230a81f3d"
        }
    ]
}